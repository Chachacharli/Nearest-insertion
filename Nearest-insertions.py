# -*- coding: utf-8 -*-
"""InsecionMasCercana2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JxE0lcIP3LMUJzS88Aa-ju38qE5pzumF
"""

from numpy import genfromtxt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv
from math import sqrt
import pprint
from operator import sub


nodos = 0
data = csv.reader(open('5nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [0], [0]
arcos = []
coordenadas = [None]*(5)
distanciaInterna = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

arcos = []

cercaniaT ={}
nn2 ={}
candidatos = {}
distancias = {}

nodos = 5

def crearDiccionario(n):
  for i in range(1, n +1):
    for j in range(n + 1):
      if (i !=j): 
       distancias[(i,j)] = []
       cercaniaT[(i,j)] = []
 

for i in range(1, nodos + 2) :
  for j in range(1, nodos + 1):
    if (i != j):
     arcos.append((i +1,j+1))



for i in range(1, nodos +1):
  for j in range(1, nodos + 1):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )


distancias

#Empezamos a hacer el subTour 

nodoInicial = 1
Tour = [nodoInicial]

k = Tour[-1]
nn = { (k,j): distancias[ (k,j) ] for j in range(1, nodos+1) if k!=j and j not in Tour }
new = min(nn.items(), key = lambda x:x[1])
Tour.append(new[0][1])

Tour.append(nodoInicial)
print(Tour)
plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(Tour)-1):
    plt.plot([X[Tour[n]],X[Tour[n+1]]],
             [Y[Tour[n]],Y[Tour[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

while(len(Tour)< nodos+1):
  distancias2 = {}
  deltaF = [0]
  for i in range(len(Tour)-1):
      for j in range( 1, nodos +1):
        if (Tour[i] !=j) and j not in Tour: 
         distancias2[(Tour[i] , j)] = [distancias[(Tour[i] , j)]]
  new = min(distancias2.items(), key = lambda x:x[1])
  k = new[0][1]

  num = len(Tour)
  for i in range(1, len(Tour)): 
    if Tour[i] != Tour[num-i]:
      deltaF.append((distancias[(Tour[i],k)] + distancias[(k, Tour[num-i])]  - distancias[(Tour[i],Tour[num-i])]))
  

  deltaF.pop(0)
  new = min(deltaF)
  index = deltaF.index(new)

  Tour.insert(index+1,k)
  print()
  
print(Tour)
plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(Tour)-1):
    plt.plot([X[Tour[n]],X[Tour[n+1]]],
             [Y[Tour[n]],Y[Tour[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

Tour.clear()

nodos = 0
data = csv.reader(open('48nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [0], [0]
arcos = []
coordenadas = [None]*(5)
distanciaInterna = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

arcos = []

cercaniaT ={}
nn2 ={}
candidatos = {}
distancias = {}

nodos = 48

def crearDiccionario(n):
  for i in range(1, n +1):
    for j in range(n + 1):
      if (i !=j): 
       distancias[(i,j)] = []
       cercaniaT[(i,j)] = []
 

for i in range(1, nodos + 2) :
  for j in range(1, nodos + 1):
    if (i != j):
     arcos.append((i +1,j+1))



for i in range(1, nodos +1):
  for j in range(1, nodos + 1):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )


#Empezamos a hacer el subTour 

nodoInicial = 1
Tour = [nodoInicial]

k = Tour[-1]
nn = { (k,j): distancias[ (k,j) ] for j in range(1, nodos+1) if k!=j and j not in Tour }
new = min(nn.items(), key = lambda x:x[1])
Tour.append(new[0][1])

Tour.append(nodoInicial)
print(Tour)

while(len(Tour)< nodos+1):
  distancias2 = {}
  deltaF = [0]
  for i in range(len(Tour)-1):
      for j in range( 1, nodos +1):
        if (Tour[i] !=j) and j not in Tour: 
         distancias2[(Tour[i] , j)] = [distancias[(Tour[i] , j)]]
  new = min(distancias2.items(), key = lambda x:x[1])
  k = new[0][1]


  num = len(Tour)
  for i in range(1, len(Tour)): 
    if Tour[i] != Tour[num-i]:
      deltaF.append((distancias[(Tour[i],k)] + distancias[(k, Tour[num-i])]  - distancias[(Tour[i],Tour[num-i])]))
  

  deltaF.pop(0)
  new = min(deltaF)
  index = deltaF.index(new)

  Tour.insert(index+1,k)

print(Tour)
plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(Tour)-1):
    plt.plot([X[Tour[n]],X[Tour[n+1]]],
             [Y[Tour[n]],Y[Tour[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

Tour.clear()
deltaF.clear()

nodos = 0
data = csv.reader(open('101nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [0], [0]
arcos = []
coordenadas = [None]*(5)
distanciaInterna = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

arcos = []

cercaniaT ={}
nn2 ={}
candidatos = {}
distancias = {}

nodos = 101

def crearDiccionario(n):
  for i in range(1, n +1):
    for j in range(n + 1):
      if (i !=j): 
       distancias[(i,j)] = []
       cercaniaT[(i,j)] = []
 

for i in range(1, nodos + 2) :
  for j in range(1, nodos + 1):
    if (i != j):
     arcos.append((i +1,j+1))



for i in range(1, nodos +1):
  for j in range(1, nodos + 1):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )


#Empezamos a hacer el subTour 

nodoInicial = 1
Tour = [nodoInicial]

k = Tour[-1]
nn = { (k,j): distancias[ (k,j) ] for j in range(1, nodos+1) if k!=j and j not in Tour }
new = min(nn.items(), key = lambda x:x[1])
Tour.append(new[0][1])

Tour.append(nodoInicial)

while(len(Tour) < nodos+1):
  distancias2 = {}
  deltaF = [0]
  for i in range(len(Tour)-1):
      for j in range( 1, nodos +1):
        if (Tour[i] !=j) and j not in Tour: 
         distancias2[(Tour[i] , j)] = [distancias[(Tour[i] , j)]]
  new = min(distancias2.items(), key = lambda x:x[1])
  k = new[0][1]

  num = len(Tour)
  for i in range(1, len(Tour)): 
    if Tour[i] != Tour[num-i]:
      deltaF.append((distancias[(Tour[i],k)] + distancias[(k, Tour[num-i])]  - distancias[(Tour[i],Tour[num-i])]))
  

  deltaF.pop(0)
  new = min(deltaF)
  index = deltaF.index(new)

  Tour.insert(index+1,k)
print()
print(Tour)

plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(Tour)-1):
    plt.plot([X[Tour[n]],X[Tour[n+1]]],
             [Y[Tour[n]],Y[Tour[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()